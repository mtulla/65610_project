"""Utils that can be re-used by other pieces of code in the module."""

import enum
import string
from functools import partial
from types import FunctionType
from typing import Any, Callable, Dict, Iterable, List, Optional, Tuple, Union

import numpy
import onnx
import torch
from concrete.fhe import Exactness
from concrete.fhe.dtypes import Integer
from sklearn.base import is_classifier, is_regressor

from ..common.check_inputs import check_array_and_assert
from ..common.debugging import assert_true

_VALID_ARG_CHARS = set(string.ascii_letters).union(str(i) for i in range(10)).union(("_",))


SUPPORTED_FLOAT_TYPES = {
    "float64": torch.float64,
    "float32": torch.float32,
}

SUPPORTED_INT_TYPES = {
    "int64": torch.int64,
    "int32": torch.int32,
    "int16": torch.int16,
    "int8": torch.int8,
}

SUPPORTED_TYPES = {**SUPPORTED_FLOAT_TYPES, **SUPPORTED_INT_TYPES}

MAX_BITWIDTH_BACKWARD_COMPATIBLE = 8

# Indicate if the old virtual library method should be used instead of the compiler simulation
# when simulating FHE executions
USE_OLD_VL = False

# Debug option for testing round PBS optimization
# Setting this option to true will make quantizers "round half up"
# For example: 0.5 -> 1, 1.5 -> 2 instead of "round half to even"
# When the option is set to false, Concrete ML uses numpy.rint
# which has the same behavior as torch.round -> Brevitas nets
# should be exact compared to their Concrete ML QuantizedModule
QUANT_ROUND_LIKE_ROUND_PBS = False


class FheMode(str, enum.Enum):
    """Enum representing the execution mode.

    This enum inherits from str in order to be able to easily compare a string parameter to its
    equivalent Enum attribute.

    Examples:
        fhe_disable = FheMode.DISABLE

        >>> fhe_disable == "disable"
        True

        >>> fhe_disable == "execute"
        False

        >>> FheMode.is_valid("simulate")
        True

        >>> FheMode.is_valid(FheMode.EXECUTE)
        True

        >>> FheMode.is_valid("predict_in_fhe")
        False

    """

    DISABLE = "disable"
    SIMULATE = "simulate"
    EXECUTE = "execute"

    @staticmethod
    def is_valid(fhe: Union["FheMode", str]) -> bool:
        """Indicate if the given name is a supported FHE mode.

        Args:
            fhe (Union[FheMode, str]): The FHE mode to check.

        Returns:
            bool: Whether the FHE mode is supported or not.
        """
        return fhe in FheMode.__members__.values()
